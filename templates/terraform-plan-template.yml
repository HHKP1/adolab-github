parameters:
  - name: environmentName
    type: string
  - name: serviceConnection
    type: string
  - name: agentPool
    type: string

steps:
- task: DownloadBuildArtifacts@0
  displayName: 'Download Artifacts'
  inputs:
    artifactName: 'iac-terraform'
    downloadPath: '$(System.DefaultWorkingDirectory)'

- task: ExtractFiles@1
  displayName: 'Extract Artifacts'
  inputs:
    archiveFilePatterns: '$(System.DefaultWorkingDirectory)/iac-terraform/iac.terraform.$(Build.BuildNumber).zip'
    destinationFolder: '$(System.DefaultWorkingDirectory)/extracted'
    cleanDestinationFolder: true

- task: TerraformInstaller@0
  displayName: 'Install Terraform $(terraform_version)'
  inputs:
    terraformVersion: '$(terraform_version)'

- task: TerraformTaskV2@2
  displayName: 'Terraform Init for ${{ parameters.environmentName }}'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/extracted/terraform'
    backendServiceArm: '${{ parameters.serviceConnection }}'
    backendAzureRmResourceGroupName: '$(resource_group_name)'
    backendAzureRmStorageAccountName: '$(storage_account_name)'
    backendAzureRmContainerName: '$(container_name)'
    backendAzureRmKey: '${{ parameters.environmentName }}.tfstate'
    backendConfig: |
      use_msi = false

- task: TerraformTaskV2@2
  displayName: 'Terraform Plan for ${{ parameters.environmentName }}'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/extracted/terraform'
    environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
    commandOptions: >-
      -out=tfplan
      -var="RESOURCE_NAME_PREFIX=$(RESOURCE_NAME_PREFIX)"
      -var="LOCATION=$(LOCATION)"
      -var="ENV=${{ parameters.environmentName }}"
      -var="SQL_SERVER_ADMINISTRATOR_LOGIN=$(SQL_SERVER_ADMINISTRATOR_LOGIN)"
      -var="SQL_SERVER_ADMINISTRATOR_PASSWORD=$(SQL_SERVER_ADMINISTRATOR_PASSWORD)"
      -var="app_version=$(versionNumber)"

- task: PowerShell@2
  displayName: 'Display Terraform Plan Summary'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(System.DefaultWorkingDirectory)/extracted/terraform'
    script: |
      Write-Host "üìã Terraform Plan Summary for ${{ parameters.environmentName }} environment:" -ForegroundColor Cyan
      Write-Host "üèóÔ∏è  Resource Group: rg-adolearn-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}" -ForegroundColor Yellow
      Write-Host "üåê App Service: app-adolearn-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}" -ForegroundColor Yellow
      Write-Host "üóÑÔ∏è  SQL Server: sql-adolearn-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}" -ForegroundColor Yellow
      Write-Host "üíæ SQL Database: sqldb-adolearn-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}" -ForegroundColor Yellow
      Write-Host "üì¶ Version: $(versionNumber)" -ForegroundColor Green
      
      # Check if plan file exists
      if (Test-Path "tfplan") {
        Write-Host "`nüìä Plan file created successfully. Ready for approval and apply." -ForegroundColor Green
        
        # Try to show a basic plan summary (cross-platform compatible)
        try {
          $planOutput = terraform show -no-color tfplan
          if ($planOutput -match "Plan: (\d+) to add, (\d+) to change, (\d+) to destroy") {
            Write-Host "üìà Resources: $($matches[1]) to add, $($matches[2]) to change, $($matches[3]) to destroy" -ForegroundColor Magenta
          }
        } catch {
          Write-Host "‚ÑπÔ∏è  Plan details available for review in apply stage." -ForegroundColor Gray
        }
      } else {
        Write-Host "‚ö†Ô∏è  Plan file not found!" -ForegroundColor Red
        exit 1
      }

- task: PublishBuildArtifacts@1
  displayName: 'Publish Plan Artifacts for ${{ parameters.environmentName }}'
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/extracted'
    artifactName: 'terraform-plan-${{ parameters.environmentName }}'
    publishLocation: 'Container'