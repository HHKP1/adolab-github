parameters:
  - name: environmentName
    type: string
  - name: serviceConnection
    type: string
  - name: agentPool
    type: string

steps:
- task: DownloadBuildArtifacts@1
  displayName: 'Download Plan Artifacts for ${{ parameters.environmentName }}'
  inputs:
    artifactName: 'terraform-plan-${{ parameters.environmentName }}'
    downloadPath: '$(Pipeline.Workspace)'

- task: TerraformInstaller@1
  displayName: 'Install Terraform $(terraform_version)'
  inputs:
    terraformVersion: '$(terraform_version)'

- task: PowerShell@2
  displayName: 'Pre-Apply Verification'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(Pipeline.Workspace)/terraform-plan-${{ parameters.environmentName }}/terraform'
    script: |
      Write-Host "üîç Pre-Apply Verification for ${{ parameters.environmentName }}:" -ForegroundColor Cyan
      
      # Check if plan file exists
      if (Test-Path "tfplan") {
        Write-Host "‚úÖ Plan file found and ready for apply" -ForegroundColor Green
        
        # Show what will be applied
        try {
          Write-Host "`nüìã Plan Summary:" -ForegroundColor Yellow
          terraform show -no-color tfplan | Select-Object -First 20
          Write-Host "`n... (truncated for readability)" -ForegroundColor Gray
        } catch {
          Write-Host "‚ÑπÔ∏è  Plan file is valid and ready for apply" -ForegroundColor Gray
        }
      } else {
        Write-Host "‚ùå Plan file not found!" -ForegroundColor Red
        Write-Host "Available files:" -ForegroundColor Yellow
        Get-ChildItem -Path . | Format-Table Name, Length -AutoSize
        exit 1
      }

- task: TerraformTask@5
  displayName: 'Terraform Apply for ${{ parameters.environmentName }}'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(Pipeline.Workspace)/terraform-plan-${{ parameters.environmentName }}/terraform'
    environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
    commandOptions: 'tfplan'

- task: TerraformTask@5
  displayName: 'Terraform Output for ${{ parameters.environmentName }}'
  inputs:
    provider: 'azurerm'
    command: 'output'
    workingDirectory: '$(Pipeline.Workspace)/terraform-plan-${{ parameters.environmentName }}/terraform'
    environmentServiceNameAzureRM: '${{ parameters.serviceConnection }}'
  continueOnError: true

- task: PowerShell@2
  displayName: 'Display Infrastructure URLs'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "‚úÖ Infrastructure deployed successfully for environment: ${{ parameters.environmentName }}" -ForegroundColor Green
      Write-Host "" -ForegroundColor White
      Write-Host "üîó Infrastructure Details:" -ForegroundColor Cyan
      Write-Host "üèóÔ∏è  Resource Group: rg-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}" -ForegroundColor Yellow
      Write-Host "üåê App Service URL: https://app-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}.azurewebsites.net" -ForegroundColor Cyan
      
      if ("${{ parameters.environmentName }}" -eq "prod") {
        Write-Host "üü¢ Staging Slot URL: https://app-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-prod-staging.azurewebsites.net" -ForegroundColor Yellow
      }
      
      Write-Host "üóÑÔ∏è  SQL Server: sql-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}" -ForegroundColor Magenta
      Write-Host "üíæ SQL Database: sqldb-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}" -ForegroundColor Magenta
      Write-Host "üì¶ Version deployed: $(versionNumber)" -ForegroundColor Green
      Write-Host "" -ForegroundColor White

- task: PowerShell@2
  displayName: 'Verify Deployment'
  inputs:
    targetType: 'inline'
    script: |
      $appUrl = "https://app-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-${{ parameters.environmentName }}.azurewebsites.net"
      
      Write-Host "üîç Verifying App Service deployment..." -ForegroundColor Yellow
      
      try {
        # Test if the URL is reachable
        $response = Invoke-WebRequest -Uri $appUrl -Method HEAD -TimeoutSec 30 -UseBasicParsing -ErrorAction Stop
        
        if ($response.StatusCode -eq 200) {
          Write-Host "‚úÖ App Service is responding successfully!" -ForegroundColor Green
          Write-Host "üìä Status Code: $($response.StatusCode)" -ForegroundColor Green
        } else {
          Write-Host "‚ö†Ô∏è  App Service responded with status code: $($response.StatusCode)" -ForegroundColor Yellow
        }
      } 
      catch {
        # This is normal for new deployments - the app might still be starting
        Write-Host "‚ö†Ô∏è  App Service is not yet responding (normal for new deployments)" -ForegroundColor Yellow
        Write-Host "üïí The application may take 2-5 minutes to start up completely." -ForegroundColor Cyan
        
        # Don't fail the pipeline for this
        Write-Host "‚ÑπÔ∏è  Error details: $($_.Exception.Message)" -ForegroundColor Gray
      }
      
      Write-Host "" -ForegroundColor White
      Write-Host "üîó Access your application at: $appUrl" -ForegroundColor Cyan
      
      if ("${{ parameters.environmentName }}" -eq "prod") {
        Write-Host "üü¢ Staging slot will be available at: https://app-$(RESOURCE_NAME_PREFIX)-$(LOCATION)-prod-staging.azurewebsites.net" -ForegroundColor Yellow
      }

- task: PowerShell@2
  displayName: 'Environment Summary'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìã Deployment Summary for ${{ parameters.environmentName }} Environment:" -ForegroundColor Cyan
      Write-Host "=" * 60 -ForegroundColor Gray
      Write-Host "‚úÖ Status: Deployment Completed Successfully" -ForegroundColor Green
      Write-Host "üè∑Ô∏è  Environment: ${{ parameters.environmentName }}" -ForegroundColor Yellow
      Write-Host "üì¶ Version: $(versionNumber)" -ForegroundColor Green
      Write-Host "üïí Deployed at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" -ForegroundColor Gray
      Write-Host "üîß Agent: ${{ parameters.agentPool }}" -ForegroundColor Gray
      Write-Host "=" * 60 -ForegroundColor Gray